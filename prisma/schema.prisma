// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  JOB_SEEKER
  COMPANY
  ADMIN
}

enum ApplicationStatus {
  SUBMITTED
  UNDER_REVIEW
  INTERVIEW_SCHEDULED
  ACCEPTED
  REJECTED
}

enum JobStatus {
  ACTIVE
  PAUSED
  CLOSED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RefundStatus {
  NOT_REQUESTED
  REQUESTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  PROCESSED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String
  role          UserRole  @default(JOB_SEEKER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  company       Company?
  jobSeeker     JobSeeker?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Company {
  id              String   @id @default(cuid())
  userId          String   @unique
  companyName     String
  description     String?
  industry        String?
  website         String?
  logo            String?
  location        String?
  size            String?
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs            Job[]

  @@map("companies")
}

model JobSeeker {
  id              String   @id @default(cuid())
  userId          String   @unique
  phone           String?
  location        String?
  resume          String?  // URL to resume file
  skills          String[] // Array of skills
  experience      Int?     // Years of experience
  education       String?
  bio             String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications    Application[]

  @@map("job_seekers")
}

model Job {
  id                  String    @id @default(cuid())
  companyId           String
  title               String
  description         String
  requirements        String
  category            String
  location            String
  salaryMin           Int?
  salaryMax           Int?
  applicationFee      Int       // Amount in cents
  guaranteeTerms      String    // Guarantee conditions
  guaranteePeriod     Int       // Days until guarantee expires
  status              JobStatus @default(ACTIVE)
  postedFor           String?   // Company name if posting for another company
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  company             Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications        Application[]

  @@map("jobs")
}

model Application {
  id              String            @id @default(cuid())
  jobId           String
  jobSeekerId     String
  status          ApplicationStatus @default(SUBMITTED)
  coverLetter     String?
  customResume    String?           // Optional custom resume for this application
  appliedAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  jobSeeker       JobSeeker         @relation(fields: [jobSeekerId], references: [id], onDelete: Cascade)
  payment         Payment?
  guarantee       Guarantee?
  messages        Message[]

  @@unique([jobId, jobSeekerId]) // One application per job per seeker
  @@map("applications")
}

model Payment {
  id              String        @id @default(cuid())
  applicationId   String        @unique
  amount          Int           // Amount in cents
  currency        String        @default("usd")
  status          PaymentStatus @default(PENDING)
  stripePaymentId String?       @unique
  stripeCustomerId String?
  receiptUrl      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  application     Application   @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  refund          Refund?

  @@map("payments")
}

model Guarantee {
  id              String   @id @default(cuid())
  applicationId   String   @unique
  terms           String
  expiresAt       DateTime
  fulfilled       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  refund          Refund?

  @@map("guarantees")
}

model Refund {
  id              String        @id @default(cuid())
  paymentId       String        @unique
  guaranteeId     String        @unique
  amount          Int           // Amount in cents
  reason          String
  status          RefundStatus  @default(NOT_REQUESTED)
  stripeRefundId  String?       @unique
  requestedAt     DateTime      @default(now())
  processedAt     DateTime?
  adminNotes      String?

  payment         Payment       @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  guarantee       Guarantee     @relation(fields: [guaranteeId], references: [id], onDelete: Cascade)

  @@map("refunds")
}

model Message {
  id              String      @id @default(cuid())
  applicationId   String
  senderId        String      // Can be Company or JobSeeker ID
  senderType      String      // "COMPANY" or "JOB_SEEKER"
  content         String
  read            Boolean     @default(false)
  createdAt       DateTime    @default(now())

  application     Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("messages")
}
